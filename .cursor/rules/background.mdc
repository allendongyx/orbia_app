---
alwaysApply: true
---

项目背景：​​
我们是一个SaaS平台，专注于为Web3和区块链领域的公司解决在TikTok上的广告投放难题。

​核心问题：​​
由于加密货币和区块链内容的敏感性，Web3项目在TikTok上进行广告投放面临极高的审核失败率和账户封禁风险。同时，他们也需要与了解Web3知识的KOL进行有效合作。

​平台解决方案：​​

​合规广告投放：​​ 我们作为TikTok的官方授权合作伙伴，拥有白名单权限。客户可以通过我们的平台创建广告活动，利用我们的代理资质，显著提高广告过审率并保障账户安全。
​KOL营销市场：​​ 平台内集成了一个KOL市场。Web3客户可以浏览并直接联系平台上经过筛选的、对Web3领域有深入了解的内容创作者，发起营销活动。
​核心价值：​​
我们本质上是连接Web3世界与TikTok庞大流量生态的桥梁，通过技术和代理服务，帮助客户安全、高效地获取用户和进行品牌曝光。

- 任何功能的实现优先使用tailwind 的样式和统一的变更配置。
- 组件功能首先考虑使用radix-ui 组件来实现功能。
- 任何 ui 布局的变更，需要从上到下的考虑 layout 的布局。确保 ui 的布局不会因为一个变更导致更大范围的影响。
- 在执行每个命令后除非用户特别要求，否则不要启动服务，但是编译服务来验证非运行时是否正确。
- 在执行每个命令后除非用户特别要求，否则除了代码文件以外不要产出任何的文档类或其他任何文件。
- 代码编译使用 pnpm
- 针对部分逻辑的修改，你应该优先使用通用组件，在组件不满足的情况下，优先修改组件，保证代码的充分复用性。
- 符合 react 的最佳实践、保证代码鲁棒性，合理的 ui、用户体验以及样式的复用。
- 如果一个页面太过于复杂，你应该拆成不同的页面组件，这样也可以更节省 token。更加准确的修改代码。符合最佳实践。
- 字典数据缓存规则：应用启动时自动加载所有字典数据到 localStorage（24小时有效期），所有字典读取操作优先从本地缓存获取，无需网络请求。使用 DictionaryProvider、useDictionaryCache、useDictionaryTree 来管理和访问字典缓存。
